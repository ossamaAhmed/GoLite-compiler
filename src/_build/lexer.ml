# 1 "lexer.mll"
 

open Parser 
open Error


type token =
    | INTLITERAL of (int)
    | FLOATLITERAL of (float)
    | STRINGLITERAL of (string)
    | IDENTIFIER of (string)
    | RUNELITERAL of (char)
    | PLUS 
    | AND 
    | PLUS_EQ 
    | AND_EQ 
    | DOUBLE_AND 
    | DOUBLE_EQ 
    | NOT_EQ 
    | OPEN_PAREN 
    | CLOSE_PAREN 
    | MINUS 
    | BAR 
    | MINUS_EQ 
    | BAR_EQ 
    | DOUBLE_BAR 
    | LT 
    | LT_EQ 
    | OPEN_SQR_BRACKET 
    | CLOSE_SQR_BRACKET 
    | STAR 
    | CARET 
    | STAR_EQ 
    | CARET_EQ 
    | LT_MINUS 
    | GT 
    | GT_EQ 
    | OPEN_CUR_BRACKET 
    | CLOSE_CUR_BRACKET 
    | SLASH 
    | SHIFT_LEFT 
    | SLASH_EQ 
    | SHIFT_LEFT_EQ 
    | DOUBLE_PLUS 
    | EQ 
    | COLON_EQ 
    | COMMA 
    | SEMICOLON 
    | PERCENT 
    | SHIFT_RIGHT 
    | PERCENT_EQ 
    | SHIFT_RIGHT_EQ 
    | DOUBLE_MINUS 
    | NOT 
    | TRIPLE_DOT 
    | DOT 
    | COLON 
    | AND_CARET 
    | AND_CARET_EQ 
    | BREAK 
    | DEFAULT 
    | FUNC 
    | INTERFACE
    | SELECT
    | CASE
    | DEFER
    | GO
    | MAP
    | CHAN 
    | ELSE
    | GOTO
    | PACKAGE
    | SWITCH
    | CONST
    | FALLTHROUGH
    | IF
    | RANGE
    | TYPE 
    | CONTINUE 
    | FOR 
    | IMPORT 
    | RETURN 
    | VAR 
    | INT
    | FLOAT64 
    | BOOL 
    | RUNE 
    | STRING 
    | PRINT 
    | PRINTLN 
    | APPEND
    | EOL

let keywords = Hashtbl.create 30;;
Hashtbl.add keywords "break" BREAK ;
Hashtbl.add keywords "default" DEFAULT ;
Hashtbl.add keywords "func" FUNC ;
Hashtbl.add keywords "interface" INTERFACE ;
Hashtbl.add keywords "select" SELECT ;
Hashtbl.add keywords "defer" DEFER ;
Hashtbl.add keywords "go" GO ;
Hashtbl.add keywords "map" MAP ;
Hashtbl.add keywords "chan" CHAN ;
Hashtbl.add keywords "else" ELSE ;
Hashtbl.add keywords "goto" GOTO ;
Hashtbl.add keywords "package" PACKAGE ;
Hashtbl.add keywords "switch" SWITCH ;
Hashtbl.add keywords "const" CONST ;
Hashtbl.add keywords "fallthrough" FALLTHROUGH ;
Hashtbl.add keywords "if" IF ;
Hashtbl.add keywords "range" RANGE ;
Hashtbl.add keywords "type" TYPE ;
Hashtbl.add keywords "continue" CONTINUE ;
Hashtbl.add keywords "for" FOR ;
Hashtbl.add keywords "import" IMPORT ;
Hashtbl.add keywords "return" RETURN ;
Hashtbl.add keywords "var" VAR ;
Hashtbl.add keywords "int" INT  ;
Hashtbl.add keywords "float64" FLOAT64  ;
Hashtbl.add keywords "bool" BOOL ;
Hashtbl.add keywords "rune" RUNE ;
Hashtbl.add keywords "string" STRING ;
Hashtbl.add keywords "print" PRINT ;
Hashtbl.add keywords "println" PRINTLN ;
Hashtbl.add keywords "append" APPEND ;
Hashtbl.add keywords "case" CASE ;;

(* keyword -> token translation table *)
(*let keywords = [
    "var", VARDCL;"float", FLOATDCL; "int", INTDCL;"string",STRINGDCL ;"read", READ; "print", PRINT; "if", IF;
    "then", THEN; "else", ELSE; "endif", ENDIF; "while", WHILE; "do", DO; "done", DONE
]*)

exception Syntax_error of string
exception Eof



# 141 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\198\255\199\255\202\255\203\255\126\000\158\000\001\001\
    \094\001\171\001\083\001\183\001\002\000\220\255\221\255\003\000\
    \199\001\229\255\230\255\091\001\031\000\194\000\238\255\239\255\
    \096\001\094\001\197\001\247\255\248\255\069\001\093\001\192\001\
    \200\001\224\255\253\255\124\001\251\255\252\255\209\255\250\255\
    \249\255\215\255\244\255\242\255\243\255\125\001\233\255\240\255\
    \225\255\235\255\234\255\126\001\231\255\216\255\146\001\180\001\
    \226\255\201\255\202\001\203\001\222\255\217\255\214\001\201\001\
    \213\255\224\001\244\001\254\001\023\002\036\002\073\002\204\002\
    \076\003\205\255\152\001\076\002\211\001\204\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\255\255\057\000\057\000\057\000\
    \049\000\047\000\047\000\043\000\036\000\255\255\255\255\044\000\
    \027\000\255\255\255\255\023\000\019\000\018\000\255\255\255\255\
    \014\000\010\000\009\000\255\255\255\255\041\000\032\000\001\000\
    \000\000\255\255\255\255\045\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\028\000\255\255\255\255\
    \255\255\255\255\255\255\037\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\055\000\255\255\255\255\048\000\255\255\
    \255\255\048\000\255\255\255\255\047\000\047\000\255\255\255\255\
    \050\000\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\000\000\000\000\255\255\074\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\000\000\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\000\000\000\000\
    \255\255\255\255\255\255\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\054\000\055\000\
    \000\000\000\000\054\000\054\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\074\000\255\255\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\004\000\000\000\000\000\003\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\029\000\007\000\000\000\000\000\012\000\031\000\005\000\
    \028\000\027\000\021\000\032\000\014\000\026\000\011\000\016\000\
    \009\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\015\000\013\000\024\000\030\000\019\000\061\000\
    \060\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\023\000\050\000\022\000\020\000\008\000\
    \006\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\018\000\025\000\017\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\075\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\073\000\049\000\
    \002\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\072\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\070\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\065\000\040\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\046\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \052\000\051\000\039\000\044\000\045\000\047\000\255\255\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\038\000\048\000\053\000\058\000\008\000\057\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\065\000\043\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\066\000\066\000\063\000\036\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\054\000\041\000\033\000\058\000\058\000\055\000\064\000\
    \073\000\059\000\077\000\000\000\000\000\037\000\000\000\000\000\
    \000\000\000\000\042\000\067\000\056\000\034\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\000\000\000\000\000\000\000\000\035\000\000\000\
    \000\000\000\000\065\000\067\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\065\000\000\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\066\000\
    \066\000\000\000\000\000\000\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\000\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\071\000\000\000\000\000\000\000\000\000\
    \071\000\000\000\000\000\076\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\071\000\000\000\000\000\
    \076\000\000\000\071\000\071\000\000\000\076\000\076\000\071\000\
    \000\000\000\000\076\000\000\000\255\255\000\000\000\000\071\000\
    \000\000\000\000\076\000\071\000\000\000\071\000\076\000\071\000\
    \076\000\000\000\076\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\072\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \070\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\072\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \070\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
    \015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\006\000\021\000\
    \000\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\010\000\029\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\024\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \019\000\019\000\030\000\025\000\024\000\024\000\006\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\035\000\045\000\051\000\054\000\008\000\055\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\009\000\025\000\009\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\011\000\031\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\016\000\026\000\032\000\058\000\059\000\016\000\063\000\
    \074\000\058\000\076\000\255\255\255\255\031\000\255\255\255\255\
    \255\255\255\255\026\000\009\000\016\000\032\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\255\255\255\255\255\255\255\255\031\000\255\255\
    \255\255\255\255\066\000\009\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\067\000\
    \067\000\067\000\067\000\067\000\067\000\068\000\255\255\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
    \068\000\255\255\255\255\255\255\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\255\255\067\000\
    \067\000\067\000\067\000\067\000\067\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\070\000\255\255\255\255\255\255\255\255\
    \070\000\255\255\255\255\075\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\069\000\069\000\069\000\
    \069\000\069\000\069\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\054\000\255\255\255\255\255\255\255\255\255\255\
    \074\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\070\000\255\255\255\255\
    \075\000\255\255\070\000\070\000\255\255\075\000\075\000\070\000\
    \255\255\255\255\075\000\255\255\055\000\255\255\255\255\070\000\
    \255\255\255\255\075\000\070\000\255\255\070\000\075\000\070\000\
    \075\000\255\255\075\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\058\000\059\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec golite lexbuf =
    __ocaml_lex_golite_rec lexbuf 0
and __ocaml_lex_golite_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 173 "lexer.mll"
               ( PLUS )
# 475 "lexer.ml"

  | 1 ->
# 174 "lexer.mll"
               ( AND )
# 480 "lexer.ml"

  | 2 ->
# 175 "lexer.mll"
               ( PLUS_EQ )
# 485 "lexer.ml"

  | 3 ->
# 176 "lexer.mll"
               ( AND_EQ )
# 490 "lexer.ml"

  | 4 ->
# 177 "lexer.mll"
               ( DOUBLE_AND )
# 495 "lexer.ml"

  | 5 ->
# 178 "lexer.mll"
               ( DOUBLE_EQ )
# 500 "lexer.ml"

  | 6 ->
# 179 "lexer.mll"
               ( NOT_EQ )
# 505 "lexer.ml"

  | 7 ->
# 180 "lexer.mll"
               ( OPEN_PAREN )
# 510 "lexer.ml"

  | 8 ->
# 181 "lexer.mll"
               ( CLOSE_PAREN )
# 515 "lexer.ml"

  | 9 ->
# 182 "lexer.mll"
               ( MINUS )
# 520 "lexer.ml"

  | 10 ->
# 183 "lexer.mll"
               ( BAR )
# 525 "lexer.ml"

  | 11 ->
# 184 "lexer.mll"
               ( MINUS_EQ )
# 530 "lexer.ml"

  | 12 ->
# 185 "lexer.mll"
               ( BAR_EQ )
# 535 "lexer.ml"

  | 13 ->
# 186 "lexer.mll"
               ( DOUBLE_BAR )
# 540 "lexer.ml"

  | 14 ->
# 187 "lexer.mll"
               ( LT )
# 545 "lexer.ml"

  | 15 ->
# 188 "lexer.mll"
               ( LT_EQ )
# 550 "lexer.ml"

  | 16 ->
# 189 "lexer.mll"
               ( OPEN_SQR_BRACKET )
# 555 "lexer.ml"

  | 17 ->
# 190 "lexer.mll"
               ( CLOSE_SQR_BRACKET )
# 560 "lexer.ml"

  | 18 ->
# 191 "lexer.mll"
               ( STAR )
# 565 "lexer.ml"

  | 19 ->
# 192 "lexer.mll"
               ( CARET )
# 570 "lexer.ml"

  | 20 ->
# 193 "lexer.mll"
               ( STAR_EQ )
# 575 "lexer.ml"

  | 21 ->
# 194 "lexer.mll"
               ( CARET_EQ )
# 580 "lexer.ml"

  | 22 ->
# 195 "lexer.mll"
               ( LT_MINUS )
# 585 "lexer.ml"

  | 23 ->
# 196 "lexer.mll"
               ( GT )
# 590 "lexer.ml"

  | 24 ->
# 197 "lexer.mll"
               ( GT_EQ )
# 595 "lexer.ml"

  | 25 ->
# 198 "lexer.mll"
               ( OPEN_CUR_BRACKET )
# 600 "lexer.ml"

  | 26 ->
# 199 "lexer.mll"
               ( CLOSE_CUR_BRACKET )
# 605 "lexer.ml"

  | 27 ->
# 200 "lexer.mll"
               ( SLASH )
# 610 "lexer.ml"

  | 28 ->
# 201 "lexer.mll"
               ( SHIFT_LEFT )
# 615 "lexer.ml"

  | 29 ->
# 202 "lexer.mll"
               ( SLASH_EQ )
# 620 "lexer.ml"

  | 30 ->
# 203 "lexer.mll"
               ( SHIFT_LEFT_EQ )
# 625 "lexer.ml"

  | 31 ->
# 204 "lexer.mll"
               ( DOUBLE_PLUS )
# 630 "lexer.ml"

  | 32 ->
# 205 "lexer.mll"
               ( EQ )
# 635 "lexer.ml"

  | 33 ->
# 206 "lexer.mll"
               ( COLON_EQ )
# 640 "lexer.ml"

  | 34 ->
# 207 "lexer.mll"
               ( COMMA )
# 645 "lexer.ml"

  | 35 ->
# 208 "lexer.mll"
               ( SEMICOLON )
# 650 "lexer.ml"

  | 36 ->
# 209 "lexer.mll"
               ( PERCENT )
# 655 "lexer.ml"

  | 37 ->
# 210 "lexer.mll"
               ( SHIFT_RIGHT )
# 660 "lexer.ml"

  | 38 ->
# 211 "lexer.mll"
               ( PERCENT_EQ )
# 665 "lexer.ml"

  | 39 ->
# 212 "lexer.mll"
               ( SHIFT_RIGHT_EQ )
# 670 "lexer.ml"

  | 40 ->
# 213 "lexer.mll"
               ( DOUBLE_MINUS )
# 675 "lexer.ml"

  | 41 ->
# 214 "lexer.mll"
               ( NOT )
# 680 "lexer.ml"

  | 42 ->
# 215 "lexer.mll"
               ( TRIPLE_DOT )
# 685 "lexer.ml"

  | 43 ->
# 216 "lexer.mll"
               ( DOT )
# 690 "lexer.ml"

  | 44 ->
# 217 "lexer.mll"
               ( COLON )
# 695 "lexer.ml"

  | 45 ->
# 218 "lexer.mll"
               ( AND_CARET )
# 700 "lexer.ml"

  | 46 ->
# 219 "lexer.mll"
               ( AND_CARET_EQ )
# 705 "lexer.ml"

  | 47 ->
let
# 221 "lexer.mll"
                 d
# 711 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 221 "lexer.mll"
                   ( 
        (* parse literal *)
        INTLITERAL (int_of_string d)
    )
# 718 "lexer.ml"

  | 48 ->
let
# 225 "lexer.mll"
                   f
# 724 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 225 "lexer.mll"
                     (
      FLOATLITERAL (float_of_string f)
    )
# 730 "lexer.ml"

  | 49 ->
let
# 228 "lexer.mll"
                    i
# 736 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 228 "lexer.mll"
                      (
        (* try keywords if not found then it's identifier *)
        let myvar = i in
        try Hashtbl.find keywords myvar
        with Not_found -> IDENTIFIER myvar   
    )
# 745 "lexer.ml"

  | 50 ->
let
# 234 "lexer.mll"
                    s
# 751 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 234 "lexer.mll"
                      (
      STRINGLITERAL  (s)
    )
# 757 "lexer.ml"

  | 51 ->
let
# 237 "lexer.mll"
                  r
# 763 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 237 "lexer.mll"
                   (
      RUNELITERAL(String.get r 0)
    )
# 769 "lexer.ml"

  | 52 ->
# 240 "lexer.mll"
               ( line_num:= !line_num+1; Lexing.new_line lexbuf; EOL)
# 774 "lexer.ml"

  | 53 ->
# 241 "lexer.mll"
               ( golite lexbuf )
# 779 "lexer.ml"

  | 54 ->
# 242 "lexer.mll"
                       ( golite lexbuf )
# 784 "lexer.ml"

  | 55 ->
# 243 "lexer.mll"
                    ( golite lexbuf )
# 789 "lexer.ml"

  | 56 ->
# 244 "lexer.mll"
               ( raise Eof )
# 794 "lexer.ml"

  | 57 ->
# 245 "lexer.mll"
               ( print_string ("unknown char "^Lexing.lexeme lexbuf);print_string(" on line "^(string_of_int !line_num)^"\n");golite lexbuf)
# 799 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_golite_rec lexbuf __ocaml_lex_state

;;

# 248 "lexer.mll"
 

# 809 "lexer.ml"
