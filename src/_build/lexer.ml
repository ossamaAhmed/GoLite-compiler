# 1 "lexer.mll"
 

open Parser 
open Error

type token =
    | INTLITERAL of (int)
    | FLOATLITERAL of (float)
    | STRINGVAR of (string)
    | PLUS 
    | AND 
    | PLUS_EQ 
    | AND_EQ 
    | DOUBLE_AND 
    | DOUBLE_EQ 
    | NOT_EQ 
    | OPEN_PAREN 
    | CLOSE_PAREN 
    | MINUS 
    | BAR 
    | MINUS_EQ 
    | BAR_EQ 
    | DOUBLE_BAR 
    | LT 
    | LT_EQ 
    | OPEN_SQR_BRACKET 
    | CLOSE_SQR_BRACKET 
    | STAR 
    | CARET 
    | STAR_EQ 
    | CARET_EQ 
    | LT_MINUS 
    | GT 
    | GT_EQ 
    | OPEN_CUR_BRACKET 
    | CLOSE_CUR_BRACKET 
    | SLASH 
    | SHIFT_LEFT 
    | SLASH_EQ 
    | SHIFT_LEFT_EQ 
    | DOUBLE_PLUS 
    | EQ 
    | COLON_EQ 
    | COMMA 
    | SEMICOLON 
    | PERCENT 
    | SHIFT_RIGHT 
    | PERCENT_EQ 
    | SHIFT_RIGHT_EQ 
    | DOUBLE_MINUS 
    | NOT 
    | TRIPLE_DOT 
    | DOT 
    | COLON 
    | AND_CARET 
    | AND_CARET_EQ 
    | EOL
(* keyword -> token translation table *)
(*let keywords = [
    "var", VARDCL;"float", FLOATDCL; "int", INTDCL;"string",STRINGDCL ;"read", READ; "print", PRINT; "if", IF;
    "then", THEN; "else", ELSE; "endif", ENDIF; "while", WHILE; "do", DO; "done", DONE
]*)

exception Syntax_error of string
exception Eof



# 71 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\201\255\202\255\001\000\204\255\205\255\030\000\033\000\
    \017\000\108\000\014\000\220\255\221\255\015\000\016\000\229\255\
    \230\255\105\000\017\000\019\000\238\255\239\255\110\000\065\000\
    \123\000\247\255\248\255\031\000\108\000\134\000\130\000\224\255\
    \253\255\113\000\251\255\252\255\209\255\250\255\249\255\215\255\
    \244\255\242\255\243\255\114\000\233\255\240\255\225\255\235\255\
    \234\255\115\000\231\255\216\255\226\255\222\255\217\255\148\000\
    \131\000\213\255\158\000\170\000\181\000\212\000\236\000\018\001\
    \070\001\124\001\203\255\014\000\182\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\054\000\255\255\255\255\054\000\047\000\
    \047\000\043\000\036\000\255\255\255\255\044\000\027\000\255\255\
    \255\255\023\000\019\000\018\000\255\255\255\255\014\000\010\000\
    \009\000\255\255\255\255\041\000\032\000\001\000\000\000\255\255\
    \255\255\045\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\028\000\255\255\255\255\255\255\255\255\
    \255\255\037\000\255\255\255\255\255\255\255\255\255\255\048\000\
    \255\255\255\255\048\000\255\255\255\255\047\000\047\000\049\000\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\000\000\067\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\255\255\000\000\
    \000\000\255\255\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\067\000\067\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\005\000\066\000\000\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \066\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \004\000\027\000\006\000\003\000\068\000\010\000\029\000\000\000\
    \026\000\025\000\019\000\030\000\012\000\024\000\009\000\014\000\
    \007\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\013\000\011\000\022\000\028\000\017\000\058\000\
    \063\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\054\000\053\000\052\000\048\000\058\000\
    \047\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\059\000\059\000\021\000\038\000\020\000\018\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\060\000\064\000\016\000\023\000\015\000\042\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\060\000\056\000\044\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\050\000\049\000\
    \039\000\037\000\043\000\045\000\034\000\031\000\036\000\046\000\
    \051\000\057\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \040\000\000\000\000\000\000\000\000\000\041\000\000\000\032\000\
    \066\000\000\000\000\000\035\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\068\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\033\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\058\000\000\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\059\000\059\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\000\000\063\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\064\000\000\000\
    \000\000\000\000\000\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\063\000\000\000\
    \000\000\000\000\065\000\000\000\000\000\000\000\000\000\065\000\
    \065\000\000\000\000\000\000\000\065\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\065\000\000\000\255\255\000\000\
    \065\000\000\000\065\000\000\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
    \064\000\000\000\000\000\000\000\000\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\003\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \067\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\003\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\008\000\
    \006\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\010\000\013\000\014\000\018\000\007\000\
    \019\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\000\000\027\000\000\000\000\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\007\000\006\000\000\000\000\000\000\000\023\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\007\000\009\000\022\000\009\000\009\000\009\000\009\000\
    \009\000\009\000\009\000\009\000\009\000\009\000\017\000\017\000\
    \024\000\028\000\022\000\022\000\029\000\030\000\033\000\043\000\
    \049\000\056\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \024\000\255\255\255\255\255\255\255\255\023\000\255\255\030\000\
    \068\000\255\255\255\255\029\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\055\000\055\000\055\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \059\000\068\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\029\000\060\000\060\000\060\000\
    \060\000\060\000\060\000\060\000\060\000\060\000\060\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\060\000\060\000\
    \060\000\060\000\060\000\060\000\255\255\255\255\255\255\255\255\
    \000\000\003\000\061\000\255\255\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\067\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\060\000\060\000\
    \060\000\060\000\060\000\060\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\062\000\062\000\062\000\
    \062\000\062\000\062\000\255\255\063\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\062\000\062\000\062\000\
    \062\000\062\000\062\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\064\000\063\000\255\255\
    \255\255\255\255\255\255\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
    \063\000\063\000\063\000\063\000\063\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\065\000\255\255\
    \255\255\255\255\064\000\255\255\255\255\255\255\255\255\064\000\
    \064\000\255\255\255\255\255\255\064\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\064\000\255\255\068\000\255\255\
    \064\000\255\255\064\000\255\255\064\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\255\255\
    \065\000\255\255\255\255\255\255\255\255\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec golite lexbuf =
    __ocaml_lex_golite_rec lexbuf 0
and __ocaml_lex_golite_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 96 "lexer.mll"
               ( PLUS )
# 286 "lexer.ml"

  | 1 ->
# 97 "lexer.mll"
               ( AND )
# 291 "lexer.ml"

  | 2 ->
# 98 "lexer.mll"
               ( PLUS_EQ )
# 296 "lexer.ml"

  | 3 ->
# 99 "lexer.mll"
               ( AND_EQ )
# 301 "lexer.ml"

  | 4 ->
# 100 "lexer.mll"
               ( DOUBLE_AND )
# 306 "lexer.ml"

  | 5 ->
# 101 "lexer.mll"
               ( DOUBLE_EQ )
# 311 "lexer.ml"

  | 6 ->
# 102 "lexer.mll"
               ( NOT_EQ )
# 316 "lexer.ml"

  | 7 ->
# 103 "lexer.mll"
               ( OPEN_PAREN )
# 321 "lexer.ml"

  | 8 ->
# 104 "lexer.mll"
               ( CLOSE_PAREN )
# 326 "lexer.ml"

  | 9 ->
# 105 "lexer.mll"
               ( MINUS )
# 331 "lexer.ml"

  | 10 ->
# 106 "lexer.mll"
               ( BAR )
# 336 "lexer.ml"

  | 11 ->
# 107 "lexer.mll"
               ( MINUS_EQ )
# 341 "lexer.ml"

  | 12 ->
# 108 "lexer.mll"
               ( BAR_EQ )
# 346 "lexer.ml"

  | 13 ->
# 109 "lexer.mll"
               ( DOUBLE_BAR )
# 351 "lexer.ml"

  | 14 ->
# 110 "lexer.mll"
               ( LT )
# 356 "lexer.ml"

  | 15 ->
# 111 "lexer.mll"
               ( LT_EQ )
# 361 "lexer.ml"

  | 16 ->
# 112 "lexer.mll"
               ( OPEN_SQR_BRACKET )
# 366 "lexer.ml"

  | 17 ->
# 113 "lexer.mll"
               ( CLOSE_SQR_BRACKET )
# 371 "lexer.ml"

  | 18 ->
# 114 "lexer.mll"
               ( STAR )
# 376 "lexer.ml"

  | 19 ->
# 115 "lexer.mll"
               ( CARET )
# 381 "lexer.ml"

  | 20 ->
# 116 "lexer.mll"
               ( STAR_EQ )
# 386 "lexer.ml"

  | 21 ->
# 117 "lexer.mll"
               ( CARET_EQ )
# 391 "lexer.ml"

  | 22 ->
# 118 "lexer.mll"
               ( LT_MINUS )
# 396 "lexer.ml"

  | 23 ->
# 119 "lexer.mll"
               ( GT )
# 401 "lexer.ml"

  | 24 ->
# 120 "lexer.mll"
               ( GT_EQ )
# 406 "lexer.ml"

  | 25 ->
# 121 "lexer.mll"
               ( OPEN_CUR_BRACKET )
# 411 "lexer.ml"

  | 26 ->
# 122 "lexer.mll"
               ( CLOSE_CUR_BRACKET )
# 416 "lexer.ml"

  | 27 ->
# 123 "lexer.mll"
               ( SLASH )
# 421 "lexer.ml"

  | 28 ->
# 124 "lexer.mll"
               ( SHIFT_LEFT )
# 426 "lexer.ml"

  | 29 ->
# 125 "lexer.mll"
               ( SLASH_EQ )
# 431 "lexer.ml"

  | 30 ->
# 126 "lexer.mll"
               ( SHIFT_LEFT_EQ )
# 436 "lexer.ml"

  | 31 ->
# 127 "lexer.mll"
               ( DOUBLE_PLUS )
# 441 "lexer.ml"

  | 32 ->
# 128 "lexer.mll"
               ( EQ )
# 446 "lexer.ml"

  | 33 ->
# 129 "lexer.mll"
               ( COLON_EQ )
# 451 "lexer.ml"

  | 34 ->
# 130 "lexer.mll"
               ( COMMA )
# 456 "lexer.ml"

  | 35 ->
# 131 "lexer.mll"
               ( SEMICOLON )
# 461 "lexer.ml"

  | 36 ->
# 132 "lexer.mll"
               ( PERCENT )
# 466 "lexer.ml"

  | 37 ->
# 133 "lexer.mll"
               ( SHIFT_RIGHT )
# 471 "lexer.ml"

  | 38 ->
# 134 "lexer.mll"
               ( PERCENT_EQ )
# 476 "lexer.ml"

  | 39 ->
# 135 "lexer.mll"
               ( SHIFT_RIGHT_EQ )
# 481 "lexer.ml"

  | 40 ->
# 136 "lexer.mll"
               ( DOUBLE_MINUS )
# 486 "lexer.ml"

  | 41 ->
# 137 "lexer.mll"
               ( NOT )
# 491 "lexer.ml"

  | 42 ->
# 138 "lexer.mll"
               ( TRIPLE_DOT )
# 496 "lexer.ml"

  | 43 ->
# 139 "lexer.mll"
               ( DOT )
# 501 "lexer.ml"

  | 44 ->
# 140 "lexer.mll"
                 ( COLON )
# 506 "lexer.ml"

  | 45 ->
# 141 "lexer.mll"
               ( AND_CARET )
# 511 "lexer.ml"

  | 46 ->
# 142 "lexer.mll"
               ( AND_CARET_EQ )
# 516 "lexer.ml"

  | 47 ->
let
# 144 "lexer.mll"
                 d
# 522 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 144 "lexer.mll"
                   ( 
        (* parse literal *)
        INTLITERAL (int_of_string d)
    )
# 529 "lexer.ml"

  | 48 ->
let
# 148 "lexer.mll"
                   f
# 535 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 148 "lexer.mll"
                     (
      FLOATLITERAL (float_of_string f)
    )
# 541 "lexer.ml"

  | 49 ->
let
# 151 "lexer.mll"
                                s
# 547 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 151 "lexer.mll"
                                  (
      STRINGVAR   (s)
    )
# 553 "lexer.ml"

  | 50 ->
# 154 "lexer.mll"
               ( line_num:= !line_num+1; Lexing.new_line lexbuf; EOL)
# 558 "lexer.ml"

  | 51 ->
# 155 "lexer.mll"
               ( golite lexbuf )
# 563 "lexer.ml"

  | 52 ->
# 156 "lexer.mll"
               ( golite lexbuf )
# 568 "lexer.ml"

  | 53 ->
# 157 "lexer.mll"
               ( raise Eof )
# 573 "lexer.ml"

  | 54 ->
# 158 "lexer.mll"
               ( raise (MinilangError ("unknown char "^ "on line "^(string_of_int !line_num))))
# 578 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_golite_rec lexbuf __ocaml_lex_state

;;

# 161 "lexer.mll"
 

# 588 "lexer.ml"
